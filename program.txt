/*#include<iostream>
#include<fstream>
#include<stdlib.h>
#include<string.h>
#include<ctype.h>

using namespace std;

int isKeyword(char buffer[])
{
    char keywords[32][10] =
    {
        "and"
        , "bool"
        , "do"
        , "else"
        , "end"
        , "false"
        , "float"
        , "for"
        , "if"
        , "int"
        , "not"
        , "or"
        , "read"
        , "record"
        , "then"
        , "to"
        , "true"
        , "type"
        , "var"
        , "while"
        , "write"
    };
    int i, flag = 0;

    for(i = 0; i < 32; ++i)
    {
        if(strcmp(keywords[i], buffer) == 0)
        {
            flag = 1;
            break;
        }
    }

    return flag;
}*/

//int main()
//{
    //char ch, buffer[15], operators[] = "+-*/%=";
   /* ifstream fin("program.txt");
    int i,j=0;

    if(!fin.is_open())
    {
        cout<<"error while opening the file\n";
        exit(0);
    }

    while(!fin.eof())
    {
        ch = fin.get();

        for(i = 0; i < 6; ++i)
        {
        if(ch == operators[i])
                cout<<ch<<" is operator\n";
        }

       if(isdigit(ch))
        {
            buffer[j++] = ch;
            cout<<ch<<" is num\n";
        }
        else if((ch == ' ' || ch == '\n') && (j != 0))
        {
            buffer[j] = '\0';
            j = 0;

            if(isKeyword(buffer) == 1)
                cout<<buffer<<" is keyword\n";
            else if (!isdigit(buffer[0]))
                cout<<buffer<<" is indentifier\n";
        }

    }

    fin.close();

    return 0;
}*/#include <iostream>
#include <string>
#include <fstream>

using namespace std;
ofstream outfile;
void getToken(string,int);
bool isDigit(char);
bool isLetter(char);
bool isSpace(char);
bool isSymbol(char);
bool isqouted(char s) ;
enum DFAstates { START, INCOMMENT, INNUM,qouted,INID,NESTED, INASSIGN, DONE };
DFAstates state = START; //set START to be intial state

string RES_WORDS[] = { "WRITE", "READ", "IF", "ELSE", "RETURN", "BEGIN", "END", "MAIN", "STRING", "INT", "REAL" };

int main() {

	//reading sample tiny code from file
	ifstream file;

	string line;
	int i=0;
	file.open("tiny_sample_code.txt");
freopen("parser_input.txt", "w", stdout);
  while (!file.eof()) {
		getline(file, line);


		i++;


	}
	string code[i];
	file.close();
fclose(stdout);
int j=0;
file.open("tiny_sample_code.txt");
outfile.open("parser_input.txt", std::ios_base::app);


 for(;j<i;j++){
		getline(file, line);

		code [j]= line;


getToken(code[j],j+1);
 }


file.close();
//    outfile.close;



	//writing scanner output to file

     // this is written to redir.txt



	return 0;
}


void getToken(string l,int linenum)
{
	string mytoken;
	bool res_flag = 0;
	int i = 0;
	while (state != DONE) {
		switch (state) {
		case START:
			if (isSpace(l[i])) {
				i++;
				if (i == l.length()) state = DONE;
				else state = START;
			}
			else if (isDigit(l[i]) && ! isLetter(l[i-1])) {
				state = INNUM;
			}
			else if (isLetter(l[i])) {
				state = INID;
			}else if (l[i] == '"') {
				state = qouted;
			}
			else if (l[i] == ':' ||l[i] == '!'||l[i] == '=') {
				state = INASSIGN;
			}
			else if (l[i] == '{' ) {
				i++;
				state = NESTED;
			}
			else if (l[i] == '/' && l[i+1]=='*'&&l[i+2]=='*' ) {
                 i+=3;
				state = INCOMMENT;
			}
			else if (isSymbol(l[i])&& l[i+1]!='*'&&l[i+2]!='*') {
				switch (l[i]) {
				case ';': outfile<<"line "<<linenum<<" "<< l[i]<<" Single-character operators  \n"; break;
				default:outfile <<"line "<<linenum<<" "<<l[i] << " Single    -character operators \n"; break;
				}
				i++;
				if (i == l.length()) {state = DONE;
                    break;}
				else state = START;
			}
			else state = DONE;
			break;

		case NESTED:
			if (state == NESTED) {
				while (l[i] != '}') {
					i++;
				}
				i++;
				if (i == l.length()) {state = DONE;
                    break;}
				else state = START;
			}
				else state = START;

			break;

		case INNUM:
			while (isDigit(l[i]) ) {
				mytoken += l[i];
				i++;
			}
			 outfile <<"line "<<linenum<<" "<<mytoken<< " is number" << "\n";
			mytoken = "";
			if (i == l.length()) {state = DONE;
                    break;}
				else {state = START;

			break;}


		case qouted:
                    mytoken += l[i];
                    i++;
                 for(;! isqouted(l[i]);i++){

                    mytoken += l[i];


                 }
                mytoken += l[i];
                i++;
			outfile <<"line "<<linenum<<" "<<mytoken<< " is qouted string" << "\n";
			mytoken = "";
			if (i == l.length()) {state = DONE;
                    break;}
				else state = START;


			break;

		case INID:
			while (isLetter(l[i])) {
            if(isdigit(l[i+1])){
                    mytoken += l[i];
                    mytoken += l[i+1];
				 i+=2;
				}
				else{
                mytoken += l[i];
				i++;}

				}
			for (int i = 0; i < 11; i++)
			{
				if (RES_WORDS[i] == mytoken) res_flag = 1;
			}
			if (res_flag) outfile << endl<<"line "<<linenum<<" "<< mytoken << "is keyword \n ";
			else outfile<<"line "<<linenum<<" " <<mytoken<< " is identifier" << "\n";
			mytoken = "";
			res_flag = 0;
			if (i == l.length()) {
                    state = DONE;
                    break;
            }
				else state = START;

			break;

		case INASSIGN:
			if (l[i+1] == '=') {
                     mytoken += l[i];
                    mytoken += l[i+1];
				i += 2;
				outfile <<"line "<<linenum<<" "<<mytoken<< " is Multi-character operators" << "\n";
				state = START;
			}
			else {
				if (i == l.length()) {state = DONE;
                    break;}
				else state = START;
			}
			break;


		case INCOMMENT:
			if (state == INCOMMENT) {
				while (!(l[i] = '*'&&l[i+1]=='*'&&l[i+2]=='/')) {
					i++;
				}
				i+=3;
				if (i == l.length()) {state = DONE;
                    break;}
				else{ state = START;
			break;}


        case DONE:
            outfile <<"done";
			break;
		}
	}
}}

bool isDigit(char d) { return (d >= '0' && d <= '9'); }

bool isLetter(char l) { return (l >= 'a' && l <= 'z' || l >= 'A' && l <= 'Z'); }

bool isSpace(char s) { return (s == ' ' || s == '\t' || s == '\n'); }

bool isSymbol(char c) { return (c == '+' || '-' || '*' || '/' || '=' || '<' || '(' || ')' || ';'); }

bool isqouted(char s) { return ( s == '"');}


